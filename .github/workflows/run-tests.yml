name: Tests
on: [push]
jobs:

  python-tests:
    name: Django
    runs-on: ubuntu-latest
    container:
      image: docker.pkg.github.com/lafranceinsoumise/actionpopulaire.fr/agir-test-image:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ hashFiles('package-lock.json') }}
            npm-

      - uses: actions/cache@v2
        with:
          path: ~/.babel-cache
          key: babel-${{ hashFiles('agir/**/*.js') }}
          restore-keys: |
            babel-${{ hashFiles('agir/**/*.js') }}
            babel-

      - name: Install node dependencies
        run: npm ci
      - name: Build bundles
        run: npm run build:dev
        env:
          BABEL_CACHE_DIRECTORY: ~/.babel-cache
          WEBPUSH_PUBLIC_KEY: "dummy"

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - uses: actions/cache@v2
        id: restore-cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: pip-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pip-${{ hashFiles('poetry.lock') }}
            pip-

      - name: Install build dependencies
        run: python -m pip install -U poetry
      - name: Install poetry dependencies
        run: python -m poetry install

      - name: Run tests
        run: python -m poetry run ./manage.py test -v 2
        env:
          DATABASE_URL: "postgis://postgres:postgres@postgres:5432/postgres"
          LOG_DISABLE_JOURNALD: true

  python-linting:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install build dependencies
        run: python -m pip install black==19.10b0
      - name: Run black
        run: python -m black --check .

  js-tests:
    name: Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ hashFiles('package-lock.json') }}
            npm-
      - name: Install node dependencies
        run: npm ci
      - name: Run tests
        run: npm run test
