from functools import partial

import reversion
from django.core.exceptions import FieldDoesNotExist
from django.db import transaction
from django.utils.html import format_html
from django.utils.translation import ngettext
from glom import glom, T, Coalesce

from agir.donations.allocations import (
    get_supportgroup_balance,
    get_account_name_for_group,
    SPENDING_ACCOUNT,
)
from agir.donations.models import SpendingRequest, AccountOperation
from agir.donations.tasks import (
    spending_request_notify_admin,
    spending_request_notify_group_managers,
)
from agir.lib.display import display_price


def group_formatter(group):
    return format_html(
        '<a href="{group_link}">{group_name}</a> ({group_balance})<br><a href="mailto:{group_email}">{group_email}</a><br>{group_phone}',
        group_name=group.name,
        group_email=group.contact_email,
        group_phone=group.contact_phone,
        group_link=group.front_url(),
        group_balance=display_price(get_supportgroup_balance(group)),
    )


def bank_account_rib_formatter(rib):
    if not rib:
        return "-"

    return format_html(
        '<a download={name} href="{url}">üíæ¬†T√©l√©charger le RIB</a>',
        name=rib.name,
        url=rib.url,
    )


def admin_summary(spending_request):
    spec = {
        "id": "id",
        "title": "title",
        "created": "created",
        "status": T.get_status_display(),
        "campaign": "campaign",
        "timing": T.get_timing_display(),
        "spending_date": "spending_date",
        "amount": ("amount", display_price),
        "category": T.get_category_display(),
        "category_precisions": "category_precisions",
        "explanation": "explanation",
        "contact_name": "contact_name",
        "contact_phone": "contact_phone",
        "group": ("group", group_formatter),
        "event": Coalesce("event", default=""),
        "bank_account_full_name": "bank_account_full_name",
        "bank_account_iban": "bank_account_iban",
        "bank_account_bic": "bank_account_bic",
        "bank_account_rib": ("bank_account_rib", bank_account_rib_formatter),
    }

    values = glom(spending_request, spec)

    return [
        {"label": get_spending_request_field_label(key), "value": values[key] or "-"}
        for key in spec
    ]


STATUS_EXPLANATION = {
    SpendingRequest.Status.DRAFT: "Une fois votre demande compl√©t√©e, vous pourrez l'envoyer pour validation par un‚ãÖe autre gestionnaire.",
    SpendingRequest.Status.AWAITING_PEER_REVIEW: "Vous avez d√©j√† valid√© cette demande. Avant sa transmission √† l'√©quipe de suivi des questions financi√®res, elle doit tout d'abord √™tre valid√©e par un‚ãÖe autre gestionnaire.",
    SpendingRequest.Status.AWAITING_ADMIN_REVIEW: "Votre demande est en cours d'√©valuation par l'√©quipe de suivi des questions financi√®res. Vous serez pr√©venus une fois celle-ci trait√©e.",
    SpendingRequest.Status.AWAITING_SUPPLEMENTARY_INFORMATION: "Lorsque vous aurez int√©gr√© les modifications demand√©es, vous pourrez de nouveau transmettre cette demande √† l'√©quipe de suivi.",
    SpendingRequest.Status.VALIDATED: "Votre groupe ne dispose pas d'une allocation suffisante pour obtenir le r√©glement de cette demande pour le moment. D√®s que votre allocation sera suffisante, vous pourrez demander le paiement de cette demande avec ce formulaire.",
    SpendingRequest.Status.TO_PAY: "Votre demande est en attente de paiement par l'√©quipe de suivi. Cela ne devrait pas tarder !",
    SpendingRequest.Status.PAID: "Votre demande a √©t√© correctement r√©gl√©e.",
    SpendingRequest.Status.REFUSED: "Votre demande a √©t√© refus√©e car elle ne rentrait pas dans le cadre des demandes de d√©pense.",
}

NOT_READY_FOR_REVIEW_STATUS_EXPLANATION = {
    SpendingRequest.Status.DRAFT: "Avant de pouvoir √™tre envoy√©e pour validation, votre demande doit √™tre compl√®te.",
    SpendingRequest.Status.AWAITING_PEER_REVIEW: "Cette demande a d√©j√† √©t√© valid√©e par une personne. Pour permettre sa transmission, elle doit encore √™tre valid√©e par un¬∑e deuxi√®me gestionnaire. Attention¬†: avant de pouvoir √™tre valid√©e, votre demande doit √™tre compl√®te.",
    SpendingRequest.Status.AWAITING_SUPPLEMENTARY_INFORMATION: "Lorsque vous aurez int√©gr√© les modifications demand√©es, vous pourrez de nouveau transmettre cette demande √† l'√©quipe de suivi.",
}

NEXT_STATUS_EXPLANATION = {
    SpendingRequest.Status.AWAITING_PEER_REVIEW: "Une fois votre brouillon termin√©, vous pouvez le valider ci-dessous. Avant qu'il ne soit transmis √† l'√©quipe de suivi des questions financi√®res, il devra d'abord √™tre valid√© par un¬∑e autre gestionnaire financier de votre groupe.",
    SpendingRequest.Status.AWAITING_ADMIN_REVIEW: {
        SpendingRequest.Status.AWAITING_PEER_REVIEW: "Cette demande a d√©j√† √©t√© valid√©e par une personne. Pour permettre sa transmission, elle doit encore √™tre valid√©e par un¬∑e deuxi√®me gestionnaire.",
        SpendingRequest.Status.AWAITING_SUPPLEMENTARY_INFORMATION: "Lorsque vous aurez int√©gr√© les modifications demand√©es, vous pourrez de nouveau transmettre cette demande √† l'√©quipe de suivi.",
    },
    SpendingRequest.Status.TO_PAY: "L'allocation de votre groupe est maintenant suffisante pour permettre le paiement de cette demande.",
}

NEXT_STATUS_ACTION = {
    SpendingRequest.Status.AWAITING_PEER_REVIEW: "Valider",
    SpendingRequest.Status.AWAITING_ADMIN_REVIEW: "Transmettre",
    SpendingRequest.Status.TO_PAY: "Demander le paiement",
}


def get_missing_field_error_message(spending_request):
    missing_fields = get_spending_request_field_labels(spending_request.missing_fields)

    if not missing_fields and spending_request.is_valid_amount:
        return None

    message = ""

    if not spending_request.is_valid_amount:
        message += "Il n'est possible d'effectuer une demande que pour un montant inf√©rieur ou √©gal au solde disponible. "

    if missing_fields:
        message = ngettext(
            f"Le champ suivant est obligatoire pour la validation¬†: {missing_fields[0]}.",
            f"Les champs suivants sont obligatoires pour la validation¬†: {', '.join(missing_fields)}.",
            len(missing_fields),
        )

    return message.strip()


def get_revision_comment(from_status, to_status=None, person=None):
    """Renvoie un commentaire qui d√©crit le type d'op√©ration en fonction des seuls statuts de d√©part et d'arriv√©e

    Cette fonction est destin√©e √† √™tre utilis√©e pour de l'affichage dans l'admin.
    """
    # cas sp√©cifique : si on revient √† "attente d'informations suppl√©mentaires suite √† une modification par un non admin
    # c'est forc√©ment une modification
    if (
        person
        and to_status == SpendingRequest.Status.AWAITING_SUPPLEMENTARY_INFORMATION
    ):
        return "Mise √† jour de la demande"

    if not to_status or from_status == to_status:
        return "Mise √† jour de la demande"

    # some couples (from_status, to_status)
    if (from_status, to_status) in SpendingRequest.HISTORY_MESSAGES:
        return SpendingRequest.HISTORY_MESSAGES[(from_status, to_status)]

    return SpendingRequest.HISTORY_MESSAGES.get(
        to_status, "[Modification non identifi√©e]"
    )


def get_action_label(spending_request, user):
    next_status = spending_request.next_status(user)

    if not next_status:
        return None

    return NEXT_STATUS_ACTION.get(next_status, None)


def get_status_explanation(spending_request, user):
    current_status = spending_request.status
    next_status = spending_request.next_status(user)

    if next_status and NEXT_STATUS_EXPLANATION.get(next_status, None):
        if isinstance(NEXT_STATUS_EXPLANATION[next_status], dict):
            if NEXT_STATUS_EXPLANATION[next_status].get(current_status, None):
                return NEXT_STATUS_EXPLANATION[next_status][current_status]
        else:
            return NEXT_STATUS_EXPLANATION[next_status]

    explanation = ""
    if not spending_request.ready_for_review:
        explanation = NOT_READY_FOR_REVIEW_STATUS_EXPLANATION.get(current_status, "")

    if not explanation and STATUS_EXPLANATION.get(current_status, None):
        explanation = STATUS_EXPLANATION[current_status]

    if (
        spending_request.timing == SpendingRequest.Timing.UPCOMING
        and spending_request.status
        in [SpendingRequest.Status.TO_PAY, SpendingRequest.Status.PAID]
    ):
        explanation = (
            f"{explanation}\n\n‚ö†¬†Attention¬†: une fois le paiement effectu√©, vous devrez ajouter la facture aux pi√®ces "
            f"justificatives de la demande pour la finaliser."
        )

    if spending_request.missing_fields:
        explanation = (
            f"{explanation}\n\n‚úé¬†{get_missing_field_error_message(spending_request)}"
        )

    return explanation


def get_spending_request_field_label(field):
    if field in ("attachments", "documents"):
        return "Pi√®ces justificatives"

    if field == "bank_account_full_name":
        return "Titulaire du compte bancaire"

    try:
        model_field = SpendingRequest._meta.get_field(field)
    except FieldDoesNotExist:
        return field

    if field == "category_precision":
        return f"{model_field.verbose_name} (champ obsol√®te)"

    label = str(model_field.verbose_name if model_field else field)
    return label[0].upper() + label[1:]


def get_spending_request_field_labels(fields, join=False):
    fields = [get_spending_request_field_label(field) for field in fields]
    if not join:
        return fields
    return ", ".join(fields)


def schedule_validation_notifications(spending_request, user=None, **kwargs):
    person_pk = (
        user.person.pk
        if user and user.is_authenticated and user.person is not None
        else None
    )

    spending_request_notify_group_managers.delay(
        spending_request.pk,
        person_pk=person_pk,
        **kwargs,
    )

    if spending_request.status == SpendingRequest.Status.AWAITING_ADMIN_REVIEW:
        spending_request_notify_admin.delay(
            spending_request.pk,
            person_pk=person_pk,
            **kwargs,
        )


def validate_action(spending_request, user):
    """Valide la requ√™te pour v√©rification pour l'administration, ou confirme la demande de paiement

    :param spending_request:
    :param user:
    :return: whether the spending request was successfully sent for review
    """
    current_status = spending_request.status
    next_status = spending_request.next_status(user)

    if not next_status:
        return False

    with reversion.create_revision(atomic=True):
        reversion.set_comment(
            get_revision_comment(spending_request.status, next_status, user.person)
        )
        reversion.set_user(user)

        spending_request.status = next_status
        spending_request.save()
        if spending_request.status == SpendingRequest.Status.TO_PAY:
            # si les fonds ne sont pas disponibles, on ne peut pas progresser vers ce statut
            if spending_request.amount > get_supportgroup_balance(
                spending_request.group
            ):
                return False

            # l'argent est engag√©, on cr√©e l'op√©ration.
            spending_request.account_operation = AccountOperation.objects.create(
                amount=-spending_request.amount,
                source=get_account_name_for_group(spending_request.group),
                destination=SPENDING_ACCOUNT,
            )

        schedule_validation_notifications(
            spending_request,
            to_status=next_status,
            from_status=current_status,
            user=user,
        )

        return True
